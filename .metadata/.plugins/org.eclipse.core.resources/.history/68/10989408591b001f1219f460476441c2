package org.jsp.bookmyticket.service;

import java.util.Optional;

import org.jsp.bookmyticket.Exception.AdminNotFoundException;
import org.jsp.bookmyticket.dao.BusDao;
import org.jsp.bookmyticket.dto.AdminRequest;
import org.jsp.bookmyticket.dto.BusRequest;
import org.jsp.bookmyticket.dto.ResponseStructure;
import org.jsp.bookmyticket.model.Admin;
import org.jsp.bookmyticket.model.Bus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
public class BusService {
	@Autowired
	private BusDao busDao;
	
	public ResponseEntity<ResponseStructure<Bus>> saveBus(BusRequest busRequest) {
		ResponseStructure<Bus> structure = new ResponseStructure<>();
		structure.setMessage("Bus saved");
		structure.setData(busDao.saveBus(mapToBus(busRequest)));
		structure.setStatusCode(HttpStatus.CREATED.value());
		return ResponseEntity.status(HttpStatus.CREATED).body(structure);
	}
	
	public ResponseEntity<ResponseStructure<Admin>> update(AdminRequest adminRequest, int id) {
		Optional<Admin> recAdmin = adminDao.findById(id);
		ResponseStructure<Admin> structure = new ResponseStructure<>();
		if (recAdmin.isPresent()) {
			Admin dbAdmin = mapToAdmin(adminRequest);
			dbAdmin.setId(id);
			structure.setData(adminDao.saveAdmin(dbAdmin));
			structure.setMessage("Admin Updated");
			structure.setStatusCode(HttpStatus.ACCEPTED.value());
			return ResponseEntity.status(HttpStatus.ACCEPTED).body(structure);
		}
		throw new AdminNotFoundException("Cannot Update Admin as Id is Invalid");
	}

	public ResponseEntity<ResponseStructure<Admin>> findById(int id) {
		ResponseStructure<Admin> structure = new ResponseStructure<>();
		Optional<Admin> dbAdmin = adminDao.findById(id);
		if (dbAdmin.isPresent()) {
			structure.setData(dbAdmin.get());
			structure.setMessage("Admin Found");
			structure.setStatusCode(HttpStatus.OK.value());
			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new AdminNotFoundException("Invalid Admin Id");
	}
	
	
	
	private Bus mapToBus(BusRequest busRequest) {
		return Bus.builder().bus_name(busRequest.getBus_name()).bus_number(busRequest.getBus_number()).dateOfDept(busRequest.getDateOfDept())
				.from_location(busRequest.getFrom_location()).to_location(busRequest.getTo_location()).noOfSeats(busRequest.getNoOfSeats()).build();
	}
}
